@D:Kubernetes Monitoring mit Prometheus
@T:Das Traumpaar

@V:In Cloud Native Umgebungen kommen klassische Monitoring-Tools wie Nagios oder Icinga an ihre Grenzen. Sie sind nicht dafür geeignet, kurzlebige Objekte wie Container zu überwachen. Im Zusammenspiel mit Kubernetes hat sich Prometheus zu einem Traumpartner entwickelt. Dafür sorgen konzeptionelle Ähnlichkeiten, der einfache Aufbau und eine weitreichende Automatisierung.

@A:Michael Kraus

@L:Kubernetes erleichtert die Verteilung einer Container basierten Infrastruktur enorm. Man muss sich im Prinzip keine Gedanken mehr darüber machen, wo Applikationen laufen oder ob ausreichend Ressourcen zur Verfügung haben. Aber um optimale Leistung sicherzustellen, kommt man nicht daran vorbei, die Applikationen, die Container in denen sie laufen und Kubernetes selbst zu überwachen.

@L:Die grundlegende Funktionsweise von Prometheus wurde ja bereits in [1] behandelt. In diesem Artikel soll es speziell um seine Stärken in der Zusammenarbeit mit Kubernetes gehen: dank seiner eingebauten Service Discovery kann sich Prometheus selbständig über die Kubernetes API Informationen über Kubernetes selbst und darauf laufende Container, Dienste und Anwendungen holen. Deshalb muss die Konfiguration von Prometheus auch nicht geändert werden, wenn Pods gestartet oder beendet werden, oder wenn dem Kubernetes Cluster neue Knoten hinzugefügt werden: all dies erkennt Prometheus automatisch.

@L:Neben üblichen Daten wie CPU-Auslastung, Speichernutzung oder Festplatten I/O, interessieren uns in einer Kubernetes Umgebung auch Metriken von Containern, Pods, Deployments und auch der darauf laufenden Anwendungen.

@L:Dieser Artikel konzentriert sich darauf zu zeigen, wie man mit Prometheus und Grafana am einfachsten Informationen über seinen Kubernetes Cluster sammelt und visualisiert. Anhand einer Demo Umgebung soll das Gefühl dafür vermittelt werden, welche Einblicke in ein Kubernetes mit Prometheus möglich sind.

@ZT:Entdeckt

@L:Bei der Konfiguration von Prometheus orientieren wir uns dabei am offiziellen Beispiel [2]. Zur Abfrage von Metriken aus der Kubernetes API genügt beispielsweise dieser Teil:
@LI:
- job_name: 'kubernetes-apiservers'
   kubernetes_sd_configs:
     - role: endpoints
   scheme: https
   tls_config:
     ca_file: /.../serviceaccount/ca.crt
     insecure_skip_verify: true
   bearer_token_file: /.../serviceaccount/token

@L:Und schon landen durch die Service Discovery in Prometheus eine Menge von Metriken wie in Abbildung 1 gezeigt.

@Bi:001_api_metrics.png
@B:Abbildung 1: Kubernetes API Metriken

@ZT:Etikettiert

@L:Größter Vorteil von Prometheus im Zusammenspiel mit Kubernetes ist aber die Unterstützung von "Labels". Labels sind in Kubernetes die einzige Möglichkeit, gezielt auf Pods, Services und andere Objekte zuzugreifen oder zu identifizieren. Es ist deshalb enorm wichtig, dass Prometheus diese Labels erkennt und beibehält. Seine Service Discovery ist so ausgelegt, dass diese Informationen in sogenannten Meta Labels abgelegt werden. Diese können dann mit "Relabeling" Regeln in endgültige Prometheus Labels umgewandelt werden. Die Meta Labels werden nach der automatischen Erzeugung der Überwachungsziele verworfen und nicht mit gespeichert.

@L:Relabeling wird in beispielsweise im Blog von Brian Brazil [3] näher beschrieben. Regeln können beispielsweise so aussehen:
@LI:
- action: labelmap
  regex: __meta_kubernetes_service_label_(.+)
- source_labels: [__meta_kubernetes_namespace]
  action: replace
  target_label: kubernetes_namespace
- source_labels: [__meta_kubernetes_service_name]
  action: replace
  target_label: kubernetes_name

@L:Damit stehen in Prometheus schließlich dieselben Labels zur Verfügung, die man in Kubernetes seinen Nodes, Applikationen und Services zugeordnet hat. Mit Hilfe der mächtigen Abfragesprache Prom QL [4] können schließlich anhand dieser Labels Graphen oder Alarme definiert werden. Darauf wollen wir im Rahmen dieses Artikel aber nicht genauer eingehen.

@L:Beispielsweise sind diese Labels in Kubernetes definiert:
@LI:
metadata:
  labels:
    app: myapp
    mylabel: myvalue

@L:Eine daraus resultierende Prometheus-Metrik "erbt" diese:
@LI:
my_app_metric{app="myapp",mylabel="myvalue",...}

@L:Prometheus erzeugt für jedes weitere Label eine eigene Zeitreihe, das heißt jedes weitere Label fügt der Metrik <C>my_app_metric<C> eine weitere Dimension hinzu, die wiederum als separate Zeitreihe gespeichert wird. Prometheus kann hier von Haus aus schon mit Millionen von Zeitreihen umgehen, dennoch arbeiten die Entwickler momentan an der Version 2.0, die hier noch deutlich mehr bieten wird [5], um den Einsatz in extrem großen Kubernetes Umgebungen mit tausenden von Knoten weiter zu verbessern.

@ZT:Persistent oder ephemer?

@L:Vor der Installation von Prometheus sollte man sich Gedanken machen, ob man es innerhalb oder außerhalb einer Kubernetes Umgebung installieren möchte. Die Installation außerhalb bietet an Vorteilen, dass man für die dauerhafte Speicherung von Daten alle Möglichkeiten offen hat. Auch ist das Monitoring autark vom eigentlich überwachten System. Die Installation innerhalb von Kubernetes ist jedoch deutlich einfacher zu konfigurieren, ob hinsichtlich Netzwerk oder Authentifizierung. Mit <C>PersistentVolumes<C> [6] oder <C>StatefulSets<C> [7] verfügt Kubernetes inzwischen auch über gute Möglichkeiten, Daten persistent zu halten. Sofern man über ein weiteres Monitoring "von außen" verfügt, spricht deshalb wenig gegen die Installation von Prometheus innerhalb von Kubernetes.

@ZT:Ausprobiert

@L:Um die oben ausgeführten Informationen anschaulich werden zu lassen, werden wir an dieser Stelle auf Basis von "Minikube" [8] einen eigenen kleinen Kubernetes Cluster installieren, um darauf Prometheus laufen lassen.

@L:Minikube ist die einfachste Möglichkeit, Kubernetes auf seinem eigenen Rechner, egal ob Linux, MacOS oder Windows auszuprobieren. Wenn Sie die folgenden Schritte nachvollziehen möchten, folgen Sie bitte der Installationsanleitung [9] und erzeugen Sie einen neuen Kubernetes Cluster mit <C>minikube start<C>. Weitere Voraussetzungen für Minikube sind je nach Umgebung noch Virtualbox oder kubectl.

@KT: Nützliche Kommandos für Minikube:
@LI:
minikube dashboard
minikube service --namespace=monitoring prometheus
minikube service --namespace=monitoring --url prometheus
@KE:

@L:Alle für diesen Artikel benötigten Dateien können als Archiv von [10] heruntergeladen und in einem Arbeitsverzeichnis entpackt werden. Es empfiehlt sich, vor allem die Dateien mit den Kubernetes-Definitionen (<C>*.yml<C>) genauer anzusehen, da hier im Artikel wenn überhaupt nur Ausschnitte daraus abgedruckt werden können.

@L:Die folgenden Schritte sind auf Minikube zugeschnitten, deshalb werden weiterführende Themen wie persistente Speicherung oder die mit Kubernetes 1.6 eingeführte "role based access control" (RBAC) hier nicht behandelt. Prometheus kann aber auch damit eingesetzt werden [11].

@ZT:Los geht's

@L:Zur logischen Trennung von verschiedenen Komponenten verwendet man in Kubernetes die "Namespaces". Für unser Projekt erzeugen wir den Kubernetes <C>Namespace<C> "monitoring":
@LI:
$ kubectl create -f 01-monitoring-namespace.yml
namespace "monitoring" created

@L:Um einfach nachvollziehen zu können, was in unserem kleinen Kubernetes Cluster passiert, starten wir die Administrationsoberfläche mit <C>minikube dashboard<C>. Wir wählen hier den <C>Namespace<C> "monitoring" aus wie in Abbildung 2 gezeigt.

@Bi:002_minikube_dashboard.png
@B:Abbildung 2: Minikube Dashboard

@L:Im nächsten Schritt kümmern wir uns auch schon um Prometheus. Prometheus gibt es als offizielles Docker Image [12], was aber natürlich noch keinerlei Konfiguration enthält. Um zu vermeiden, dass wir bei jeder Änderung ein neues Docker Image bauen müssen, stecken wir diese Informationen in eine Kubernetes <C>ConfigMap<C> [13]. Die <C>ConfigMap<C> kann nun unabhängig geändert, gelöscht oder neu angelegt werden.
@LI:
$ kubectl create -f 02-prometheus-configmap.yml
configmap "prometheus-configmap" created

@L:Im Kubernetes <C>Deployment<C> für Prometheus [Listing 1] binden wir die gerade angelegte <C>ConfigMap<C> als <C>Volume<C> am <C>VolumeMount<C> <C>/etc/prometheus/prometheus.yml<C> ein. Damit stellen wir die Verbindung zwischen Prometheus und seiner Konfiguration her.
@LI:
$ kubectl create -f 03-prometheus-deployment.yml
deployment "prometheus" created

@KT:Listing 1: Das Prometheus Deployment
@LI:
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - image: prom/prometheus:v1.6.3
        name: prometheus
        args:
          - -config.file=/etc/prometheus/prometheus.yml
          - -storage.local.path=/prometheus
        ports:
        - containerPort: 9090
        volumeMounts:
        - mountPath: /etc/prometheus
          name: prometheus-volume-config
        - mountPath: /prometheus
          name: prometheus-volume-data
      volumes:
      - name: prometheus-volume-config
        configMap:
          name: prometheus-configmap
      - emptyDir: {}
        name: prometheus-volume-data
@KE:

@L:Das Verzeichnis zum Speichern der Prometheus Datenbank konfigurieren wir ebenfalls als <C>volume<C>, in diesem Fall als <C>emptyDir<C>. Damit werden die Daten nicht persistent gehalten werden, sondern gehen bei einem Neustart des Prometheus Pods verloren. In einem produktiven Setup kann man hier natürlich beispielsweise <C>PersistentVolumes<C> verwenden.

@L:Schließlich legen wir noch eine passenden <C>service<C> für Prometheus an, um einfach auf die laufende Prometheus-Instanz zugreifen zu können:
@LI:
$ kubectl create -f 04-prometheus-service.yml
service "prometheus" created

@L:Ein kleiner Hinweis: Services werden manchmal in Minikube als "pending" angezeigt, funktionieren aber dennoch:
@LI:
$ kubectl get service --namespace=monitoring
NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE
prometheus   10.0.0.221   <pending>     9090:31244/TCP   1m

@ZT:Ausschau halten

@L:Anwendungen, die Metriken im Prometheus Format bereitstellen, können auch quasi automatisch gefunden werden. Dafür müssen sie mit bestimmten "Annotations" versehen werden. Diese sind auch im offiziellen Beispiel [2] näher beschrieben.
@LI:
metadata:
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9100'

@L:Dies machen wir uns bei der nächsten Komponente zu Nutze: dem node-exporter [14]. Mit seiner Hilfe ermitteln wir Informationen über die Cluster Knoten wie Speichernutzung, Netwerkdurchsatz oder CPU-Auslastung. Damit man sich nicht selber darum kümmern muss, dass er auf jedem Knoten läuft, wird er als <C>DaemonSet<C> im gestartet. Ein <C>DaemonSet<C> [15] stellt sicher, dass auf jedem Knoten eine Instanz des node-exporter gestartet ist: sobald ein Knoten dazukommt, startet Kubernetes dort automatisch eine neue Instanz.

@L:Den node-exporter versehen wir mit den oben erwähnten <C>Annotations<C>, womit alle seine Instanzen ohne weitere Konfiguration von Prometheus gefunden werden und wir keinen manuellen Konfigurationsaufwand treiben müssen.
@LI:
$ kubectl create -f 05-node-exporter.yml
daemonset "node-exporter" created

@L:Damit der node-exporter aber Zugriff auf alle Informationen des Host-Systems hat, müssen wir ihn mit erweiterten Berechtigungen starten:
@LI:
securityContext:
  privileged: true

@L:Damit kann die node-exporter Instanz dann auf Ressourcen des Hosts zugreifen und beispielsweise das <C>/proc<C> Dateisystem des Hosts lesen:
@LI:
hostPID: true
hostIPC: true
hostNetwork: true
...
  volumeMounts:
    - name: proc
      mountPath: /host/proc
...
volumes:
  - name: proc
    hostPath:
      path: /proc

@ZT:Am Ziel

@L:Nach diesen wenigen Schritten ist Prometheus einsatzbereit und stellt eine Menge verschiedener Metriken bereit:
@LI:
$ minikube service prometheus --namespace=monitoring
Opening kubernetes service monitoring/prometheus in default browser...

@L:Damit wir auch einen schönen Überblick über unseren Kubernetes Cluster bekommen, installieren wir im letzten Schritt noch Grafana [16].
@LI:
$ kubectl create -f 06-grafana-deployment.yml
deployment "grafana" created
$ kubectl create -f 07-grafana-service.yml
service "grafana" created
$ minikube service grafana --namespace=monitoring
Opening kubernetes service monitoring/grafana in default browser...

@L:Um die Einrichtung von Grafana zu vereinfachen, habe ich ein kleines Skript erstellt, das eine Datenquelle für Prometheus anlegt und zwei gute Dashboards für Kubernetes [17, 18] importiert:
@LI:
$ ./configure_grafana.sh

@L:Nach der Anmeldung als <C>admin<C> mit dem Passwort <C>admin<C> kann man im Drop-Down-Menü die eben erstellten Dashboards auswählen und wie in Abbildung 3 dargestellt erkunden, welche Informationen wir über unseren Minikube Cluster bekommen. 

@Bi:003_grafana.png
@B:Abbildung 3: Grafana Dashboards

@L:Auf grafana.com gibt es inzwischen eine ganze Reihe von Dashboards rund um Kubernetes [19]. Hier ist jedoch Ausprobieren angesagt: oft scheinen andere Relabeling Regeln verwendet worden zu sein, so dass manchmal ganze Bereiche leer bleiben. Das Anpassen der Abfragen kann recht aufwendig sein, deshalb sind diese Dashboards ein guter Startpunkt - für selbst geschriebene.

@ZT:Was noch?

@L:Aktuell haben wir schon eine Menge an Informationen über unseren Kubernetes Cluster gesammelt, aber da geht noch mehr: ein interessantes Unterprojekt von Kubernetes ist kube-state-metrics [20]. Es holt sich ebenfalls aus der Kubernetes API Informationen über vorhandene Objekte und generiert daraus neue Metriken, die es in Prometheus kompatiblem Format bereitstellt [22]. Das damit komplette Monitoring im Kubernetes Dashboard zeigt Abbildung 4.
@LI:
kubectl create -f 08-kube-state-metrics-deployment.yml
deployment "kube-state-metrics" created
kubectl create -f 09-kube-state-metrics-service.yml
service "kube-state-metrics" created

@Bi:004_monitoring.png
@B:Abbildung 4: Das komplette Monitoring in Minikube

@ZT:Fazit

@L:Mit unserer Demo-Umgebung haben wir nun schon einen guten Einblick gewonnen, wie man einen Kubernetes Cluster überwachen kann. Mit einer Vielzahl von Metriken und Informationen haben wir jetzt sehr detailliert Kenntnis, was in unserem Cluster passiert. Ein produktives Monitoring-System muss beispielsweise noch um den Alertmanager erweitert werden, ebenso sollte die persistente Datenspeicherung noch bedacht werden. Einen interessanten Ansatz verfolgt der Prometheus Operator von CoreOS [22,23], mit dessen Hilfe sich ein produktionsreifes Kubernetes Monitoring mit wenig Aufwand installieren lassen kann.

@IT:Weiterführende Informationen
@IL:
[1] Michael Kraus, "Licht ins Dunkel": Linux Magazin 06/17, S. 28, <U>http://www.linux-magazin.de/Ausgaben/2017/06/Prometheus<U>
[2] Offizielles Kubernetes Beispiel: <U>https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml<U>
[3] Relabeling: <U>https://www.robustperception.io/life-of-a-label/<U>
[4] Prom QL: <U>https://prometheus.io/docs/querying/basics/<U>
[5] Prometheus 2.0: <U>https://coreos.com/blog/prometheus-2.0-storage-layer-optimization<U>
[6] PersistentVolumes: <U>https://kubernetes.io/docs/concepts/storage/persistent-volumes/<U>
[7] StatefulSets: <U>https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/<U>
[8] Minikube: <U>https://github.com/kubernetes/minikube<U>
[9] Minikube Installationsanleitung: <U>https://github.com/kubernetes/minikube#installation<U>
[10] TODO URL zum downloadarchiv
[11] Prometheus und RBAC: <U>https://github.com/prometheus/prometheus/blob/master/documentation/examples/rbac-setup.yml<U>
[12] Offizielles Prometheus Docker Image: <U>https://hub.docker.com/r/prom/prometheus/<U>
[13] ConfigMap: <U>https://kubernetes.io/docs/tasks/configure-pod-container/configmap/<U>
[14] Offizielles node-exporter Image: <U>https://hub.docker.com/r/prom/node-exporter/<U>
[15] DaemonSet: <U>https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/<U>
[16] Grafana: <U>https://grafana.com/<U>
[17] Node-exporter Dashboard: <U>https://grafana.com/dashboards/22<U>
[18] Kubernetes Pod Dashboard: <U>https://grafana.com/dashboards/737<U>
[19] Kubernetes Dashboards: <U>https://grafana.com/dashboards?dataSource=prometheus&search=Kubernetes<U>
[20] kube-state-metrics: <U>https://github.com/kubernetes/kube-state-metrics<U>
[21] kube-state-metrics Metriken: <U>https://github.com/kubernetes/kube-state-metrics/tree/master/Documentation<U>
[22] Prometheus Operator: <U>https://coreos.com/operators/prometheus/docs/latest/<U>
[23] Prometheus Operator: <U>https://github.com/coreos/prometheus-operator<U>
